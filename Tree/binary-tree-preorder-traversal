https://leetcode.com/problems/binary-tree-preorder-traversal/description/

//iterative
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        if(root==null)
        return ans;
        Stack<TreeNode> st = new Stack<>();
        TreeNode node = root; 
        while(!st.isEmpty() || node!=null)
        {
         if(node!=null)
         {
            ans.add(node.val);
            st.push(node);
            node=node.left;
         }
         else
         {
            node=st.pop();
            node=node.right;
         }
        }
        return ans;
    }
}

//recursive

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> al = new ArrayList<Integer>();
        al= traverse(al,root);
        return al;
    }
    
    public List<Integer> traverse(List<Integer> al, TreeNode root)
    {
        if(root==null)
        {
            return al;
        }
         al.add(root.val);
        traverse(al,root.left);
        traverse(al,root.right);
        return al;
    }
   
}


