https://leetcode.com/problems/merge-two-binary-trees/description/
time - o(n+m) //n,m is number of nodes in root1 and root2
space - o(n) // or o(m), whatever is longer of both, max length of stack would be that

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//latest submission - created new tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        TreeNode tmp = null;
        if(root1 == null && root2 == null) 
        {
            return null;
        }
        if(root1 == null) 
        {
            return root2;
        } 
        else if(root2 == null)
        {
            return root1;
        } 
        else 
        {
            tmp = new TreeNode(root1.val + root2.val);
            tmp.left = mergeTrees(root1.left, root2.left);
            tmp.right = mergeTrees(root1.right, root2.right);
            return tmp;
        }
    }
}

//earlier soln - modified root1
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if(root1==null)
            return root2;
        if(root2==null)
            return root1;
        root1.val=root1.val+root2.val;
        root1.left=mergeTrees(root1.left,root2.left);
        root1.right=mergeTrees(root1.right,root2.right);
        return root1;
        
    }
}
